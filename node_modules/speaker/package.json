{
  "name": "speaker",
  "description": "Output PCM audio data to the speakers",
  "keywords": [
    "pcm",
    "audio",
    "music",
    "output",
    "speaker",
    "headphone",
    "alsa",
    "coreaudio",
    "openal",
    "sdl",
    "portaudio",
    "jack",
    "oss",
    "pulse",
    "mpg123"
  ],
  "version": "0.0.9",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-speaker.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "node-gyp rebuild --mpg123-backend=dummy && mocha --reporter spec",
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "bindings": "*",
    "debug": "*",
    "readable-stream": "*"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "gypfile": true,
  "readme": "node-speaker\n============\n### Output [PCM audio][pcm] data to the speakers\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-speaker.png)](http://travis-ci.org/TooTallNate/node-speaker)\n\n\nA Writable stream instance that accepts [PCM audio][pcm] data and outputs it\nto the speakers. The output is backed by `mpg123`'s audio output modules, which\nin turn use any number of audio backends commonly found on Operating Systems\nthese days.\n\n\nInstallation\n------------\n\nSimply compile and install `node-speaker` using `npm`:\n\n``` bash\n$ npm install speaker\n```\n\nOn Debian/Ubuntu, the ALSA backend is selected by default, so be sure to have the\n`alsa.h` header file in place:\n\n``` bash\n$ sudo apt-get install libasound2-dev\n```\n\n\nExample\n-------\n\nHere's an example of piping `stdin` to the speaker, which should be 2 channel,\n16-bit audio at 44,100 samples per second (a.k.a CD quality audio).\n\n``` javascript\nvar Speaker = require('speaker');\n\n// Create the Speaker instance\nvar speaker = new Speaker({\n  channels: 2,          // 2 channels\n  bitDepth: 16,         // 16-bit samples\n  sampleRate: 44100     // 44,100 Hz sample rate\n});\n\n// PCM data from stdin gets piped into the speaker\nprocess.stdin.pipe(speaker);\n```\n\n\nAPI\n---\n\n`require('speaker')` directly returns the `Speaker` constructor. It is the only\ninterface exported by `node-speaker`.\n\n### new Speaker([ format ]) -> Speaker instance;\n\nCreates a new `Speaker` instance, which is a writable stream that you can pipe\nPCM audio data to. The optional `format` object may contain any of the `Writable`\nbase class options, as well as any of these PCM formatting options:\n\n  * `channels` - The number of audio channels. PCM data must be interleaved. Defaults to `2`.\n  * `bitDepth` - The number of bits per sample. Defaults to `16` (16-bit).\n  * `sampleRate` - The number of samples per second per channel. Defaults to `44100`.\n  * `signed` - Boolean specifying if the samples are signed or unsigned. Defaults to `true` when bit depth is 8-bit, `false` otherwise.\n  * `samplesPerFrame` The number of samples to send to the audio backend at a time. You likely don't need to mess with this value. Defaults to `1024`.\n\n#### \"open\" event\n\nFired when the backend `open()` call has completed. This happens once the first\n`write()` call happens on the speaker instance.\n\n#### \"flush\" event\n\nFired after the speaker instance has had `end()` called, and after the audio data\nhas been flushed to the speakers.\n\n#### \"close\" event\n\nFired after the \"flush\" event, after the backend `close()` call has completed.\nThis speaker instance is essentially finished after this point.\n\n\nAudio Backend Selection\n-----------------------\n\n`node-speaker` is backed by `mpg123`'s \"output modules\", which in turn use one of\nmany popular audio backends like ALSA, OSS, SDL, and lots more. The default\nbackends for each operating system are described in the table below:\n\n| **Operating System** | **Audio Backend** | **Description**\n|:---------------------|:------------------|:----------------------------------\n| Linux                | `alsa`            | Output audio using Advanced Linux Sound Architecture (ALSA).\n| Mac OS X             | `coreaudio`       | Output audio using Mac OS X's CoreAudio.\n| Windows              | `win32`           | Audio output for Windows (winmm).\n| Solaris              | `sun`             | Audio output for Sun Audio.\n\nTo manually override the default backend, pass the `--mpg123-backend` switch to\n`npm`/`node-gyp`:\n\n``` bash\n$ npm install speaker --mpg123-backend=openal\n```\n\n[pcm]: http://en.wikipedia.org/wiki/Pulse-code_modulation\n",
  "_id": "speaker@0.0.9",
  "_from": "speaker"
}
